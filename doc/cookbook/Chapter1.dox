namespace tf {

/** @page chapter1 C1: Understand the %Task

In this chapter, we demonstrate the basic construct of 
a task dependency graph - tf::Task.

@section WhatIsATask What is a Task?

A task in Cpp-Taskflow is a callable object for which the operation @std_invoke is applicable.
It can be either 
a functor, a lambda expression, a bind expression, or a class objects with @c operator() overloaded.

Cpp-Taskflow provides three methods, 
Taskflow::placeholder, 
Taskflow::silent_emplace, and 
Taskflow::emplace to create a task.

@code{.cpp}
1: tf::Taskflow tf;
2: auto A = tf.placeholder();
3: auto B = tf.silent_emplace([] () {});
4: auto [C, FuC] = tf.emplace([] () { return 1; });
@endcode

Debrief:
@li Line 1 creates a taskflow object
@li Line 2 creates an empty task 
@li Line 3 creates a task from a given callable object and returns a task handle
@li Line 4 creates a task from a given callable object and returns, in addition to a task handle, a @std_future object to access the result

Each time you create a task, including an empty one, 
the taskflow object adds a node to the present graph
and returns a task handle of type tf::Task.
A task handle is a lightweight object
that wraps up a particular node in a graph
and provides a set of methods for you to assign different attributes to the task
such as adding dependencies, naming, and assigning a new work.

@code{.cpp}
 1: tf::Taskflow tf;
 2: auto A = tf.silent_emplace([] () { std::cout << "create a task A\n"; });
 3: auto B = tf.silent_emplace([] () { std::cout << "create a task B\n"; });
 4:
 5: A.name("TaskA");
 6: A.work([] () { std::cout << "reassign A to a new task\n"; });
 7: A.precede(B);
 8:
 9: std::cout << A.name() << std::endl;            // TaskA
10: std::cout << A.num_successors() << std::endl;  // 1
11: std::cout << A.num_dependents() << std::endl;  // 0
12: 
13: std::cout << B.num_successors() << std::endl;  // 0
14: std::cout << B.num_dependents() << std::endl;  // 1
@endcode

Debrief:
@li Line 1 creates a taskflow object
@li Line 2-3 creates two tasks A and B
@li Line 5-6 assigns a name and a work to task A, and add a precedence link to task B
@li Line 7 adds a dependency link from A to B
@li Line 9-14 dumps the task attributes 

Cpp-Taskflow uses the general-purpose polymorphic function wrapper @std_function
to store and invoke any callable target in a task.
You need to follow its contract to create a task.
For instance, the callable object must be copy constructible.

@section AccessTheResultOfATask Access the Result of a Task

Unlike Taskflow::silent_emplace, the method Taskflow::emplace returns a pair of a task handle 
and a @std_future object to provide a mechanism to access the result when 
the associated task finishes.
This is particularly useful when you would like to pass data between tasks.
  
@code{.cpp}
tf::Taskflow tf;
auto [A, FuA] = tf.emplace([](){ return 1; });
tf.wait_for_all();
std::cout << FuA.get() << std::endl;   // 1
@endcode

You should be aware that every time you add a task or a dependency,
it creates only a node or an edge to the present graph.
The execution does not start until you dispatch the graph.
For example, the following code will block and never finish:

@code{.cpp}
tf::Taskflow tf;
auto [A, FuA] = tf.emplace([](){ return 1; });
std::cout << FuA.get() << std::endl;   // block
tf.wait_for_all();                     // never enter this line
@endcode

@section CreateMultipleTasksAtOneTime Create Multiple Tasks at One Time

Cpp-Taskflow uses C++ structured binding coupled with tuple
to make the creation of tasks simple.
Both Taskflow::silent_emplace and Taskflow::emplace can accept arbitrary numbers of callable objects
and create multiple tasks at one time.

@code{.cpp}
auto [A, B, C] = tf.silent_emplace(  // create three tasks in one call
  [](){ std::cout << "Task A\n"; },
  [](){ std::cout << "Task B\n"; },
  [](){ std::cout << "Task C\n"; }
);
@endcode

@section LifetimeOfATask Lifetime of A Task

A task lives with its graph, and is not destroyed until its parent graph
gets cleaned up.
A task belongs to only a graph at a time.
The lifetime of a task mostly refers to the user-given callable object,
including captured values.
As long as the graph is alive,
all the associated tasks remain their existence.
We recommend the users to read @ref LifeTimeOfAGraph.


@section C1Example1 Example 1: Create Multiple Dependency Graphs

The example below demonstrates how to reuse task handles to create two 
task dependency graphs.

@code{.cpp}
 1: #include <taskflow/taskflow.hpp>
 2:
 3: int main() {
 4: 
 5:   tf::Taskflow tf;
 6:
 7:   // create a task dependency graph
 8:   std::array<tf::Task, 4> tasks {
 9:     tf.silent_emplace([] () { std::cout << "Task A\n"; }),
10:     tf.silent_emplace([] () { std::cout << "Task B\n"; }),
11:     tf.silent_emplace([] () { std::cout << "Task C\n"; }),
12:     tf.silent_emplace([] () { std::cout << "Task D\n"; })
13:   };
14:
15:   tasks[0].precede(tasks[1]); 
16:   tasks[0].precede(tasks[2]);
17:   tasks[1].precede(tasks[3]);
18:   tasks[2].precede(tasks[3]);
19:
20:   tf.wait_for_all();
21:
22:   // create another task dependency graph
23:   tasks = {
24:     tf.silent_emplace([] () { std::cout << "New Task A\n"; }),
25:     tf.silent_emplace([] () { std::cout << "New Task B\n"; }),
26:     tf.silent_emplace([] () { std::cout << "New Task C\n"; }),
27:     tf.silent_emplace([] () { std::cout << "New Task D\n"; })
28:   };
29:
30:   tasks[3].precede(tasks[2]);
31:   tasks[2].precede(tasks[1]);
32:   tasks[1].precede(tasks[0]);
33:
34:   tf.wait_for_all();
35:
36:   return 0;
37: }
@endcode

Debrief:
@li Line 5 creates a taskflow object
@li Line 8 creates a task array to store four task handles
@li Line 9-12 creates four tasks
@li Line 15-18 adds four task dependency links
@li Line 20 dispatches the graph and blocks until it completes
@li Line 23-28 creates four new tasks and reassigns the task array to these four tasks
@li Line 30-32 adds a linear dependency to these four tasks
@li Line 34 dispatches the graph and blocks until it completes

Notice that trying to modify a task in a dispatched graph 
results in undefined behavior.
For examples, starting from Line 21, you should not modify any tasks 
but assign them to new targets (Line 23-28).

@section C1Example2 Example 2: Modify Task Attributes

This example demonstrates how to modify a task's attributes using methods defined in
the task handler.

@code{.cpp}
 1: #include <taskflow/taskflow.hpp>
 2:
 3: int main() {
 4:
 5:   tf::Taskflow tf;
 6:
 7:   std::vector<tf::Task> tasks = { 
 8:     tf.placeholder(),         // create a task with no work
 9:     tf.placeholder()          // create a task with no work
10:   };
11:
12:   tasks[0].name("This is Task 0");
13:   tasks[1].name("This is Task 1");
14:   tasks[0].precede(tasks[1]);
15:
16:   for(auto task : tasks) {    // print out each task's attributes
17:     std::cout << task.name() << ": "
18:               << "num_dependents=" << task.num_dependents() << ", "
19:               << "num_successors=" << task.num_successors() << '\n';
20:   }
21:
22:   tf.dump(std::cout);         // dump the taskflow graph
23:
24:   tasks[0].work([](){ std::cout << "got a new work!\n"; });
25:   tasks[1].work([](){ std::cout << "got a new work!\n"; });
26:
27:   tf.wait_for_all();
28:
29:   return 0;
30: }
@endcode

The output of this program looks like the following:

@code{.sh}
This is Task 0: num_dependents=0, num_successors=1
This is Task 1: num_dependents=1, num_successors=0
digraph Taskflow {
"This is Task 1";
"This is Task 0";
"This is Task 0" -> "This is Task 1";
}
got a new work!
got a new work!
@endcode

Debrief:
@li Line 5 creates a taskflow object
@li Line 7-10 creates two tasks with empty target and stores the corresponding task handles in a vector
@li Line 12-13 names the two tasks with human-readable strings 
@li Line 14 adds a dependency link from the first task to the second task
@li Line 16-20 prints out the name of each task, the number of dependents, and the number of successors
@li Line 22 dumps the task dependency graph to a @GraphVizOnline format (dot)
@li Line 24-25 assigns a new target to each task
@li Line 27 dispatches the graph and blocks until the execution finishes

You can change the name and work of a task at anytime before dispatching the graph.
The later assignment overwrites the previous values.
Only the latest information will be used.

*/

}

